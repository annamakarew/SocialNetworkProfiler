{"ast":null,"code":"var _jsxFileName = \"/Users/annamakarewicz/Desktop/CS/SocialNetworkProfiler/search-and-rescue-dashboard/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport SentimentAnalysis from './components/SentimentAnalysis';\nimport ObjectRecognition from './components/ObjectRecognition';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sentimentData, setSentimentData] = useState(null);\n  const [objectRecognitionData, setObjectRecognitionData] = useState(null);\n  // State to store the data from the response\n  const [responseData, setResponseData] = useState(null);\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleSearch = async () => {\n    // Check if the username is empty\n    if (!username.trim()) {\n      alert('Please enter a valid Instagram username.');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n\n    /*try {\n      // Make an API call to your backend to fetch Instagram data\n      const response = await axios.post(\n        'http://localhost:5001/api/fetch-data', \n        { username },\n        { headers: { 'Content-Type': 'application/json'}}\n      );\n      \n      // Extract the data from the response\n      const { sentiment, objects } = response.data;\n       // Update state with the results\n      setSentimentData(sentiment);\n      setObjectRecognitionData(objects);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setError('Failed to fetch data. Please try again.');\n    } finally {\n      setLoading(false);\n    }*/\n    try {\n      // Send a POST request to the backend with the username\n      const response = await axios.post('http://localhost:5000/api/fetch-data', {\n        username\n      });\n\n      // Set the response data from the server to state\n      setResponseData(response.data);\n    } catch (error) {\n      console.error('Error posting data:', error);\n      setError('Error connecting to the backend.'); // Show error message if something goes wrong\n    } finally {\n      setLoading(false); // Set loading to false once the request is completed\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Social Network Profiler Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Instagram username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 19\n    }, this), sentimentData && /*#__PURE__*/_jsxDEV(SentimentAnalysis, {\n      data: sentimentData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 25\n    }, this), objectRecognitionData && /*#__PURE__*/_jsxDEV(ObjectRecognition, {\n      data: objectRecognitionData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"25KL6eVH7AU2xjL0f11YE3n3p6M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","SentimentAnalysis","ObjectRecognition","jsxDEV","_jsxDEV","App","_s","username","setUsername","sentimentData","setSentimentData","objectRecognitionData","setObjectRecognitionData","responseData","setResponseData","message","setMessage","loading","setLoading","error","setError","handleSearch","trim","alert","response","post","data","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/annamakarewicz/Desktop/CS/SocialNetworkProfiler/search-and-rescue-dashboard/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport SentimentAnalysis from './components/SentimentAnalysis';\nimport ObjectRecognition from './components/ObjectRecognition';\nimport './App.css';\n\nconst App = () => {\n  const [username, setUsername] = useState('');\n  const [sentimentData, setSentimentData] = useState(null);\n  const [objectRecognitionData, setObjectRecognitionData] = useState(null);\n  // State to store the data from the response\n  const [responseData, setResponseData] = useState(null); \n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handleSearch = async () => {\n    // Check if the username is empty\n    if (!username.trim()) {\n      alert('Please enter a valid Instagram username.');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    /*try {\n      // Make an API call to your backend to fetch Instagram data\n      const response = await axios.post(\n        'http://localhost:5001/api/fetch-data', \n        { username },\n        { headers: { 'Content-Type': 'application/json'}}\n      );\n      \n      // Extract the data from the response\n      const { sentiment, objects } = response.data;\n\n      // Update state with the results\n      setSentimentData(sentiment);\n      setObjectRecognitionData(objects);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setError('Failed to fetch data. Please try again.');\n    } finally {\n      setLoading(false);\n    }*/\n    try {\n      // Send a POST request to the backend with the username\n      const response = await axios.post('http://localhost:5000/api/fetch-data', {\n          username,\n      });\n  \n      // Set the response data from the server to state\n      setResponseData(response.data);\n    } catch (error) {\n      console.error('Error posting data:', error);\n      setError('Error connecting to the backend.');  // Show error message if something goes wrong\n    } finally {\n      setLoading(false);  // Set loading to false once the request is completed\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Social Network Profiler Dashboard</h1>\n      <div className=\"input-section\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter Instagram username\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n        <button onClick={handleSearch}>Search</button>\n      </div>\n      {message && <p>{message}</p>}\n      {sentimentData && <SentimentAnalysis data={sentimentData} />}\n      {objectRecognitionData && <ObjectRecognition data={objectRecognitionData} />}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}